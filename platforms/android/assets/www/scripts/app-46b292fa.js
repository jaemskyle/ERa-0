/**
 * generator-cg-gas - Yeoman Generator for Enterprise Angular projects, with Gulp Angular Sass
 * @version v3.3.3
 * @link https://github.com/Lunatic83/generator-cg-gas
 * @license 
 */
angular.module("ERChart",["templates","ionic","LocalForageModule","firebase","mgcrea.ngStrap","ErAuth"]),angular.module("ERChart").config(["$stateProvider","$urlRouterProvider","$locationProvider","$localForageProvider",function($stateProvider,$urlRouterProvider,$locationProvider,$localForageProvider){$stateProvider.state("root",{url:"/a",templateUrl:"modules/partial/menu/menu.html","abstract":!0}),$stateProvider.state("login",{url:"/login",views:{"@":{templateUrl:"modules/partial/login/login.html"}}}),$stateProvider.state("signup",{url:"/signup",views:{"@":{templateUrl:"modules/partial/signup/signup.html",controller:"SignupCtrl"}}}),$stateProvider.state("forgot",{url:"/forgot",views:{"@":{templateUrl:"modules/partial/forgot/forgot.html",controller:"ForgotCtrl"}}}),$stateProvider.state("root.settings",{url:"/settings",views:{rootContent:{templateUrl:"modules/partial/settings/settings.html"}}}),$stateProvider.state("root.form",{url:"/form",views:{rootContent:{resolve:{isEditMode:function(){return!1}},templateUrl:"modules/partial/form/form.html",controller:"FormCtrl"}}}),$stateProvider.state("root.edit",{url:"/form/:formId",views:{rootContent:{resolve:{isEditMode:function(){return!0}},templateUrl:"modules/partial/form/form.html",controller:"FormCtrl"}}}),$stateProvider.state("root.home",{url:"/home",views:{rootContent:{resolve:{isUserAuthd:["eruser",function(eruser){return eruser.isUserAuthd()}]},templateUrl:"modules/partial/home/home.html",controller:"HomeCtrl"}}}),$stateProvider.state("pincode",{url:"/pincode",views:{"@":{templateUrl:"modules/partial/pincode/pincode.html"}}}),$urlRouterProvider.otherwise("/pincode"),$localForageProvider.setNotify(!0,!0),$localForageProvider.config({driver:window.localforage.LOCALSTORAGE,name:"ERa_",storeName:"ERaLocalStore",description:"ERa local data."})}]),angular.module("ERChart").run(["$rootScope","$state","$stateParams","$log","$firebase","$firebaseAuth","eruser",function($rootScope,$state,$stateParams,$log){$rootScope.$state=$state,$rootScope.$stateParams=$stateParams,$rootScope.$on("$stateChangeStart",function(event){$log.info("--StateChangeStart--- "+angular.toJson(event))}),$rootScope.$on("$stateChangeSuccess",function(event){$log.info("---StateChangeSuccess--- "+angular.toJson(event))}),$rootScope.$on("$stateChangeError",function(event){$log.error("event "+angular.toJson(event)),$state.go("login")}),$rootScope.safeApply=function(fn){var phase=$rootScope.$$phase;"$apply"===phase||"$digest"===phase?fn&&"function"==typeof fn&&fn():this.$apply(fn)}}]),angular.module("ERChart").controller("MenuCtrl",["$scope","$firebaseAuth","$timeout","$state",function($scope,$firebaseAuth,$timeout,$state){var erfire=new Firebase("https://era.firebaseio.com/users"),authObj=$firebaseAuth(erfire);this.logout=function(){console.log("should log out"),authObj.$unauth(),$timeout(function(){$state.go("login")})}}]),angular.module("ERChart").controller("LoginCtrl",["$scope","$timeout","$firebase","$firebaseAuth","$state","eruser",function($scope,$timeout,$firebase,$firebaseAuth,$state,eruser){function login(){$scope.authObj.$authWithPassword({email:$scope.cred.email,password:$scope.cred.pass}).then(function(authDataa){console.log("Logged in as:",authDataa.uid);var nuU={_eruid:authDataa.uid};eruser.createUser(nuU,Immutable.fromJS(authDataa)).then(function(){console.log("user is created")}),$scope.cred={},$timeout(function(){$state.go("pincode")})})["catch"](function(error){console.error("Authentication failed:",error)})}function logout(){console.log("should log out"),$scope.authObj.$unauth(),$timeout(function(){$state.go("root.login")})}{var erfireusers=new Firebase("https://era.firebaseio.com/users");$firebase(erfireusers).$asObject()}$scope.authObj=$firebaseAuth(erfireusers);var authData=$scope.authObj.$getAuth();$scope.signup={},$scope.cred={},$scope.user={eruid:null},authData?(console.log("Already in as:",authData.uid),console.log(authData),$scope.user.eruid=authData.uid,console.log($scope.user),$state.go("pincode")):console.log("Logged out"),this.login=login,this.logout=logout}]),angular.module("ERChart").controller("SignupCtrl",["$scope","$timeout","$firebase","$firebaseAuth","$state","eruser",function($scope,$timeout,$firebase,$firebaseAuth,$state){var erfire_base_url=new Firebase("https://era.firebaseio.com/users"),erfire_users_sync=$firebase(erfire_base_url);$scope.authObj=$firebaseAuth(erfire_base_url);$scope.authObj.$getAuth();$scope.signup={},$scope.cred={},$scope.user={eruid:null},$scope.signup=function(){$scope.authObj.$createUser({email:$scope.signup.email,password:$scope.signup.pass}).then(function(userData){console.log("User "+userData.uid+" created successfully!");var newUser=(userData.uid,{_eruid:userData.uid,hospital:$scope.signup.hospital,name:$scope.signup.nom,province:$scope.signup.province||null});return erfire_users_sync.$push(newUser).then(function(ref){console.log(ref.key())}),$scope.authObj.$authWithPassword({email:$scope.signup.email,password:$scope.signup.pass})}).then(function(authData){console.log("Logged in as:",authData.uid),$scope.user.eruid=authData.uid,console.log($scope.user),console.log(authData),$timeout(function(){$state.go("root.home")}),$scope.signup={}})["catch"](function(error){console.error("Error: ",error)})}}]),angular.module("ERChart").controller("ForgotCtrl",["$scope",function(){}]),angular.module("ERChart").controller("SettingsCtrl",["$scope",function(){}]),angular.module("ERChart").controller("FormCtrl",["$scope","cache","erutils","$state","isEditMode","$stateParams",function($scope,cache,erutils,$state,isEditMode){console.log($state),erutils.broadcastPageEvent(isEditMode?"isEdit":"isAdd"),$scope.print=function(){erutils.broadcastPageEvent("Print")},$scope.save=function(){$state.is("root.edit")?erutils.broadcastPageEvent("UpdateChart"):$state.is("root.form")&&erutils.broadcastPageEvent("SaveChart")},$scope.goHome=function(){erutils.broadcastPageEvent("GoHome")}}]),angular.module("ERChart").controller("EditCtrl",["$scope",function(){}]),angular.module("ERChart").controller("HomeCtrl",["$scope","cache","$interval","$state","$timeout","$firebase","$firebaseAuth","eruser","$window","isUserAuthd",function($scope,cache,$interval,$state,$timeout,$firebase,$firebaseAuth,eruser){{var erfire_base_url=new Firebase("https://era.firebaseio.com/users");$firebase(erfire_base_url)}$scope.authObj=$firebaseAuth(erfire_base_url);var er_user=($scope.authObj.$getAuth(),{});er_user=Immutable.fromJS(angular.fromJson(eruser.getLocalAuthUser())),console.log(er_user.get("token")),$scope.showListDelete=!1;var allExForms=[],init=function(){cache.getLocalData().then(function(getLocalDataSuccess){$scope.forms=getLocalDataSuccess.length?getLocalDataSuccess:allExForms})},syncScopeToLocal=function(){cache.writeLocalData(allExForms).then(function(){init()})},deleteItem=function(item,index){allExForms.length&&(allExForms.splice(index,1),syncScopeToLocal())},prepForDelete=function(item,index){cache.getLocalData().then(function(getLocalDataSuccess){getLocalDataSuccess.length&&(allExForms=getLocalDataSuccess,deleteItem(item,index))})},getLocalData=function(){cache.getLocalData().then(function(getLocalDataSuccess){getLocalDataSuccess&&(allExForms=getLocalDataSuccess,$scope.forms=getLocalDataSuccess)})};$scope.refresh=function(){getLocalData()},$scope.clearAll=function(){cache.clearAllCached(),$scope.forms=[]},$scope.canSwipeList=function(){return!0},$scope.deleteItem=function(item,index){index||1!==allExForms.length?prepForDelete(item,index):(allExForms=[],syncScopeToLocal())},$scope.editItem=function(form){$timeout(function(){$state.transitionTo("root.edit",{formId:form.id})})},init(),$scope.$on("CacheUpdate:Updated",function(){init()})}]),angular.module("ERChart").factory("cache",["$localForage","$rootScope",function($localForage,$rootScope){var cache={getStoreLength:function(){return $localForage.length()},getStoreKeys:function(){return $localForage.keys()},writeLocalData:function(data){return $localForage.setItem("ExForms",data)},getLocalData:function(){return $localForage.getItem("ExForms")},clearCachedItem:function(item){return $localForage.removeItem(item)},clearAllCached:function(){return $localForage.clear()},broadcastCacheEvent:function(eventType){console.log("broadcasting: "+eventType),$rootScope.$broadcast("CacheUpdate:"+eventType)}};return cache}]),angular.module("ERChart").factory("constants",function(){var constants={options:[{label:"not applicable",value:0},{label:"Abnormal",value:1},{label:"Normal",value:2}],heent:{cat_name:"heent",fields:[{name:"throat_clear",label:"Throat clear",model:"throatClear",note_toggle:!1,model_note:"throatClearNote",cat:"heent"},{name:"tm",label:"TM normal",model:"tm",note_toggle:!1,model_note:"tmNote",cat:"heent"},{name:"neck_supple",label:"Neck supple",model:"neckSupple",note_toggle:!1,model_note:"neckSuppleNote",cat:"heent"}],note:{name:"heent_note",label:"Heent Note",model:"heentNote",note_toggle:!1,cat:"heent"}},respiratory_exam:{cat_name:"respiratory_exam",fields:[{name:"good_bilat_a_e",label:"Good bilat A/E",model:"goodBilatA_E",note_toggle_flag:!1,model_note:"goodBilatAENote",cat:"respiratory_exam"},{name:"wheezing",label:"No Wheezing",model:"wheezing",note_toggle_flag:!1,model_note:"wheezingNote",cat:"respiratory_exam"},{name:"crackle",label:"No Crackle",model:"crackle",note_toggle_flag:!1,model_note:"crackleNote",cat:"respiratory_exam"}],note:{name:"respiratory_exam_note",label:"Respiratory Exam",model:"respiratoryExamNote",note_toggle_flag:!1,cat:"respiratory_exam"}},abdominal_exam:{cat_name:"abdominal_exam",fields:[{name:"soft_and_non_tender",label:"Soft and non tender",model:"softAndNonTender",note_toggle:!1,model_note:"softAndNonTenderNote",cat:"abdominal_exam"},{name:"bsp",label:"BSP",model:"bsp",note_toggle:!1,model_note:"bspNote",cat:"abdominal_exam"},{name:"mass",label:"No mass",model:"mass",note_toggle:!1,model_note:"massNote",cat:"abdominal_exam"},{name:"organomegaly",label:"No organomegaly",model:"organomegaly",note_toggle:!1,model_note:"organomegalyNote",cat:"abdominal_exam"},{name:"no_sign_of_peritonitis",label:"No sign of peritonitis",model:"noSignOfPeritonitis",note_toggle:!1,model_note:"noSignOfPeritonitisNote",cat:"abdominal_exam"},{name:"fpp_and_equal",label:"FPP and equal",model:"fppAndEqual",note_toggle:!1,model_note:"fppAndEqualNote",cat:"abdominal_exam"}],note:{name:"abdominal_exam_note",label:"Abdominal Exam Notes",model:"abdominalExamNote",note_toggle:!1,cat:"abdominal_exam"}},cardio_vascular:{cat_name:"cardio_vascular",fields:[{name:"s1_s2_present",label:"S1 and S2 present",model:"s1S2Present",note_toggle:!1,model_note:"s1S2PresentNote",cat:"cardio_vascular"},{name:"s3",label:"No S3",model:"s3",note_toggle:!1,model_note:"s3Note",cat:"cardio_vascular"},{name:"s4",label:"No S4",model:"s4",note_toggle:!1,model_note:"s4Note",cat:"cardio_vascular"},{name:"murmur",label:"No murmur",model:"murmur",note_toggle:!1,model_note:"murmurNote",cat:"cardio_vascular"},{name:"ppp",label:"PPP",model:"ppp",note_toggle:!1,model_note:"pppNote",cat:"cardio_vascular"},{name:"jvd",label:"No JVD",model:"jvd",note_toggle:!1,model_note:"jvdNote",cat:"cardio_vascular"}],note:{name:"cardio_vascular_note",label:"Cardio Vascular Note",model:"cardioVascularNote",note_toggle:!1,cat:"cardio_vascular"}},neurological_exam:{cat_name:"neurological_exam",fields:[{name:"cerebellum_exam",label:"Cerebellum Exam Normal",model:"cerebellumExam",note_toggle:!1,model_note:"cerebellumExamNormalNote",cat:"neurological_exam"},{name:"power",label:"Power normal",model:"power",note_toggle:!1,model_note:"powerNote",cat:"neurological_exam"},{name:"sensation",label:"Sensation Normal",model:"sensation",note_toggle:!1,model_note:"sensationNote",cat:"neurological_exam"},{name:"tone",label:"Tone normal",model:"tone",note_toggle:!1,model_note:"toneNote",cat:"neurological_exam"},{name:"reflex",label:"Reflex Normal",model:"reflex",note_toggle:!1,model_note:"reflexNote",cat:"neurological_exam"},{name:"cnii_x_ii",label:"CN II X-II normal",model:"cniixii",note_toggle:!1,model_note:"cniixiiNote",cat:"neurological_exam"}],note:{name:"neurological_exam_note",label:"Neurological Exam Note",model:"neurologicalExamNote",cat:"neurological_exam"}},values:{_id:null,id:"",date:"",time:"",printed:!1,er_card:{hpi:"",pmhx:"None",medication:"None",allergies:"None"},physical_exam:{respiratory_exam:{status:2,good_bilat_a_e:{text:"Normal",index:2},good_bilat_a_e_note:"",decrease_a_e:{text:"Normal",index:2},decrease_a_e_note:"",wheezing:{text:"Normal",index:2},wheezing_note:"",crackle:{text:"Normal",index:2},crackle_note:"",respiratory_exam_note:""},cardio_vascular:{status:2,s1:{text:"Normal",index:2},s1_note:"",s2:{text:"Normal",index:2},s2_note:"",ppp:{text:"Normal",index:2},ppp_note:"",cardio_vascular_note:""},abdominal_exam:{status:2,soft_and_non_tender:{text:"Normal",index:2},soft_and_non_tender_note:"",bsp:{text:"Normal",index:2},bsp_note:"",fpp_and_equal:{text:"Normal",index:2},fpp_and_equal_note:"",distended:{text:"Normal",index:2},distended_note:"",tender:{text:"Normal",index:2},tender_note:"",decrease_bowel_sounds:{text:"Normal",index:2},decrease_bowel_sounds_note:"",abdominal_exam_note:""},heent:{throat_clear:{text:"Normal",index:2},throat_clear_note:"",tm:{text:"Normal",index:2},tm_note:"",neck_supple:{text:"Normal",index:2},neck_supple_note:"",tm_red_and_bulging:{text:"Normal",index:2},tm_red_and_bulging_note:"",exudates_on_tonsil:{text:"Normal",index:2},exudates_on_tonsil_note:"",cervical_adenopathy:{text:"Normal",index:2},cervical_adenopathy_note:"",heent_note:""},neurological_exam:{cnii_x_ii:{text:"Normal",index:2},cnii_x_ii_note:"",power:{text:"Normal",index:2},power_note:"",sensation:{text:"Normal",index:2},sensation_note:"",tone:{text:"Normal",index:2},tone_note:"",cl_exam:{text:"Normal",index:2},cl_exam_note:"",neurological_exam_note:""},notes:""},diagnosis:"",discharge_instruction:""}};return constants}),angular.module("ERChart").factory("erutils",["$timeout","$rootScope",function($timeout,$rootScope){var erutils={showToast:function(position,duration,message){"top"===position?"short"===duration?window.plugins.toast.showShortTop(message):window.plugins.toast.showLongTop(message):"bottom"===position?"short"===duration?window.plugins.toast.showShortBottom(message):window.plugins.toast.showLongBottom(message):"center"===position&&("short"===duration?window.plugins.toast.showShortTop(message):window.plugins.toast.showLongTop(message))},filterCharts:function(charts,chartId){return charts.filter(function(chart){return chart.id!==chartId})},broadcastPageEvent:function(eventName){$timeout(function(){$rootScope.$broadcast("PageEvent:"+eventName)})}};return erutils}]),angular.module("ERChart").directive("erform",["$state","constants","$timeout","cache","$log","$stateParams","$ionicPopup","$q","erutils","$document",function($state,constants,$timeout,cache,$log,$stateParams,$ionicPopup,$q,erutils){return function($scope,$elem){var currentChart={},allCharts=[],navigateToHome=function(){$state.go("root.home"),$timeout(function(){setDefault(),cache.broadcastCacheEvent("Updated")})},showPatientIdPopupAndPrint=function(){return $ionicPopup.show({template:'<input type="text" ng-model="chart.id">',title:"Please enter a patient id.",scope:$scope,buttons:[{text:"Cancel"},{text:"<b>Print</b>",type:"button-positive",onTap:function(e){return $scope.chart.id?$scope.chart.id:void e.preventDefault()}}]})},showPatientIdPopup=function(){return $ionicPopup.show({template:'<input type="text" ng-model="chart.id">',title:"Please enter a patient id.",scope:$scope,buttons:[{text:"Cancel"},{text:"<b>Save</b>",type:"button-positive",onTap:function(e){return $scope.chart.id?$scope.chart.id:void e.preventDefault()}}]})},formFieldDefaults=constants.values;$scope.chart={},$scope.options=constants.options,$scope.resp=constants.respiratory_exam,$scope.abdo=constants.abdominal_exam,$scope.heent=constants.heent,$scope.cardiov=constants.cardio_vascular,$scope.neuro=constants.neurological_exam,$scope.physical_exam_modules={"Respiratory Exam":constants.respiratory_exam,"Abdominal Exam":constants.abdominal_exam,Heent:constants.heent,"Cardio Vascular":constants.cardio_vascular,"Neurological Exam":constants.neurological_exam};var formValueSetter=function(dataObj,flag){return"status"===flag?0:"textarea"===flag?"":"checkbox"===flag?!1:"date"===flag?moment().format("YYYY-MM-DD"):"time"===flag?moment().format("hh:mm: A"):void 0},getSavedFieldValue=function(savedValues,flag,tagType){return!angular.isObject(savedValues)||_.isEmpty(savedValues)?formValueSetter(null,"status"):tagType?"input"===tagType?_.pick(savedValues,flag)[flag]:"checkbox"===tagType?savedValues[flag]?savedValues[flag]:!1:"textarea"===tagType?savedValues[flag]?savedValues[flag]:"":void 0:savedValues[flag]},setModuleStatus=function(cat,state,param_data){cat&&($scope.ExaminationForm[cat+"_status"].$modelValue=angular.isString(param_data)||!param_data?formValueSetter(null,"status"):getSavedFieldValue(param_data[cat],"status"),$scope.ExaminationForm[cat+"_status"].$$writeModelToScope(),$scope.ExaminationForm[cat+"_status"].$render())},setCheckBoxState=function(fieldName,cat,param_data){$scope.ExaminationForm[fieldName.name].$viewValue=angular.isString(param_data)||!param_data?formValueSetter(formFieldDefaults.physical_exam[cat],"checkbox"):getSavedFieldValue(param_data[cat],fieldName.model,"checkbox"),$scope.ExaminationForm[fieldName.name].$render(),$scope.ExaminationForm[fieldName.name].$commitViewValue()},setNoteState=function(field,param_data){$scope.ExaminationForm[field.name]&&($scope.ExaminationForm[field.name].$viewValue=angular.isString(param_data)||!param_data?formValueSetter(formFieldDefaults.physical_exam[field.module][field.name],"textarea"):getSavedFieldValue(param_data[field.module],field.model,"textarea",field.module),$scope.ExaminationForm[field.name].$render(),$scope.ExaminationForm[field.name].$commitViewValue())},setDefault=function(state_data){var deferred=$q.defer();$scope.ExaminationForm.date.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults,"date"):getSavedFieldValue(state_data,"date","input"),$scope.ExaminationForm.time.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults,"time"):getSavedFieldValue(state_data,"time","input"),$scope.ExaminationForm.date.$render(),$scope.ExaminationForm.date.$commitViewValue(),$scope.ExaminationForm.time.$render(),$scope.ExaminationForm.time.$commitViewValue(),$scope.ExaminationForm.id.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults,"id","input"):getSavedFieldValue(state_data,"id","input"),$scope.ExaminationForm.id.$render(),$scope.ExaminationForm.id.$commitViewValue();for(var i=0,list=["heent","resp","abdo","cardiov","neuro"],listLen=list.length;listLen>i;i++)setModuleStatus($scope[list[i]].cat_name,function(){return angular.isObject(state_data)?getSavedFieldValue(state_data[$scope[list[i]].cat_name],"status","input",$scope[list[i]].cat_name):setModuleStatus(list[i],"status","default")},state_data);for(var i=0,list=[{name:"good_bilat_a_e",model:"goodBilatA_E"},{name:"wheezing",model:"wheezing"},{name:"crackle",model:"crackle"}],listLen=list.length;listLen>i;i++)setCheckBoxState(list[i],"respiratory_exam",state_data);for(var i=0,list=[{name:"throat_clear",model:"throatClear"},{name:"tm",model:"tm"},{name:"neck_supple",model:"neckSupple"}],listLen=list.length;listLen>i;i++)setCheckBoxState(list[i],"heent",state_data);for(var i=0,list=[{name:"soft_and_non_tender",model:"softAndNonTender"},{name:"bsp",model:"bsp"},{name:"mass",model:"mass"},{name:"organomegaly",model:"organomegaly"},{name:"no_sign_of_peritonitis",model:"noSignOfPeritonitis"},{name:"fpp_and_equal",model:"fppAndEqual"}],listLen=list.length;listLen>i;i++)setCheckBoxState(list[i],"abdominal_exam",state_data);for(var i=0,list=[{name:"s1_s2_present",model:"s1S2Present"},{name:"s3",model:"s3"},{name:"s4",model:"s4"},{name:"murmur",model:"murmur"},{name:"ppp",model:"ppp"},{name:"jvd",model:"jvd"}],listLen=list.length;listLen>i;i++)setCheckBoxState(list[i],"cardio_vascular",state_data);for(var i=0,list=[{name:"cerebellum_exam",model:"cerebellumExam"},{name:"power",model:"power"},{name:"sensation",model:"sensation"},{name:"tone",model:"tone"},{name:"reflex",model:"reflex"},{name:"cnii_x_ii",model:"cniixii"}],listLen=list.length;listLen>i;i++)setCheckBoxState(list[i],"neurological_exam",state_data);for(var i=0,list=[{name:"heent_note",model:"heentNote",module:"heent"},{name:"respiratory_exam_note",model:"respiratoryExamNote",module:"respiratory_exam"},{name:"abdominal_exam_note",model:"abdominalExamNote",module:"abdominal_exam"},{name:"cardio_vascular_note",model:"cardioVascularNote",module:"cardio_vascular"},{name:"neurological_exam_note",model:"neurologicalExamNote",module:"neurological_exam"}],listLen=list.length;listLen>i;i++)setNoteState(list[i],state_data);return $scope.ExaminationForm.hpi.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults.er_card,"hpi","textarea"):getSavedFieldValue(state_data,"hpi","textarea"),$scope.ExaminationForm.pmhx.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults.er_card,"pmhx","textarea"):getSavedFieldValue(state_data,"pmhx","textarea"),$scope.ExaminationForm.medication.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults.er_card,"medication","textarea"):getSavedFieldValue(state_data,"medication","textarea"),$scope.ExaminationForm.allergies.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults.er_card,"allergies","textarea"):getSavedFieldValue(state_data,"allergies","textarea"),$scope.ExaminationForm.notes.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults.physical_exam,"notes","textarea"):getSavedFieldValue(state_data,"notes","textarea"),$scope.ExaminationForm.diagnosis.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults,"diagnosis","textarea"):getSavedFieldValue(state_data,"diagnosis","textarea"),$scope.ExaminationForm.discharge_instruction.$viewValue=angular.isString(state_data)||!state_data?formValueSetter(formFieldDefaults,"discharge_instruction","textarea"):getSavedFieldValue(state_data,"discharge_instruction","textarea"),$scope.ExaminationForm.hpi.$render(),$scope.ExaminationForm.pmhx.$render(),$scope.ExaminationForm.medication.$render(),$scope.ExaminationForm.allergies.$render(),$scope.ExaminationForm.notes.$render(),$scope.ExaminationForm.diagnosis.$render(),$scope.ExaminationForm.discharge_instruction.$render(),$scope.ExaminationForm.hpi.$commitViewValue(),$scope.ExaminationForm.pmhx.$commitViewValue(),$scope.ExaminationForm.medication.$commitViewValue(),$scope.ExaminationForm.allergies.$commitViewValue(),$scope.ExaminationForm.notes.$commitViewValue(),$scope.ExaminationForm.diagnosis.$commitViewValue(),$scope.ExaminationForm.discharge_instruction.$commitViewValue(),deferred.resolve($scope.ExaminationForm),deferred.promise},checkChart=function(){var deferred=$q.defer();return $scope.chart.id&&""!==$scope.chart.id?deferred.resolve($scope.chart):deferred.reject("req:id"),deferred.promise},addChart=function(){var deferred=$q.defer();return allCharts.unshift(angular.extend($scope.chart,{_erid:new Date+$scope.chart.id,date:moment().format("YYYY-MM-DD"),time:""!==$scope.chart.time?$scope.chart.time:moment().format("hh:mm A")})),deferred.resolve(allCharts),deferred.promise},filterCharts=function(){var deferredFilteredCharts=$q.defer();return allCharts=erutils.filterCharts(allCharts,$stateParams.formId),deferredFilteredCharts.resolve(allCharts),deferredFilteredCharts.promise},initNewChart=function(chartStatus){cache.getLocalData().then(function(successData){allCharts=successData?successData:[]}).then(function(){angular.isObject(chartStatus)?addChart().then(function(updatedCharts){cache.writeLocalData(updatedCharts).then(function(){navigateToHome()})}):showPatientIdPopup().then(function(popUpResult){popUpResult?addChart().then(function(newChartsArray){cache.writeLocalData(newChartsArray).then(function(){navigateToHome()})}):$state.go("root.home")})})},initEditChart=function(){cache.getLocalData().then(function(successData){allCharts=successData?successData:[]}).then(function(){angular.forEach(allCharts,function(chart){$stateParams.formId===chart.id&&(setDefault(chart).then(function(formScope){formScope.$setPristine(),formScope.$setUntouched()}),currentChart=chart)})})},initSaveChart=function(){console.log("---initializing SaveChart---"),$state.is("root.form")?(console.log("---state.is root.form: creating new chart---"),checkChart().then(function(chartStatus){console.log("---chartStatus:valid > moving on..---"),initNewChart(chartStatus)},function(reason){console.log("---chartStatus:invalid > moving on..---"),initNewChart(reason)})):(console.log("---state.is root.edit: processing new form---"),filterCharts().then(function(newChartsArray){allCharts=newChartsArray,addChart().then(function(updatedCharts){console.log("---adding new chart..---"),cache.writeLocalData(updatedCharts).then(function(){console.log("---new chart add to local store successfully...---")})["finally"](function(){console.log("---all clear > going back to home.---"),navigateToHome()})})}))},prepPageToPrint=function(){$scope.ExaminationForm.date.$render(),$scope.ExaminationForm.date.$commitViewValue(),$scope.ExaminationForm.time.$render(),$scope.ExaminationForm.time.$commitViewValue(),$scope.ExaminationForm.heent_note.$render(),$scope.ExaminationForm.heent_note.$commitViewValue(),$scope.ExaminationForm.respiratory_exam_note.$render(),$scope.ExaminationForm.respiratory_exam_note.$commitViewValue(),$scope.ExaminationForm.abdominal_exam_note.$render(),$scope.ExaminationForm.abdominal_exam_note.$commitViewValue(),$scope.ExaminationForm.cardio_vascular_note.$render(),$scope.ExaminationForm.cardio_vascular_note.$commitViewValue(),$scope.ExaminationForm.neurological_exam_note.$render(),$scope.ExaminationForm.neurological_exam_note.$commitViewValue(),$scope.ExaminationForm.id.$render(),$scope.ExaminationForm.id.$commitViewValue(),$scope.ExaminationForm.good_bilat_a_e.$render(),$scope.ExaminationForm.good_bilat_a_e.$commitViewValue(),$scope.ExaminationForm.wheezing.$render(),$scope.ExaminationForm.wheezing.$commitViewValue(),$scope.ExaminationForm.crackle.$render(),$scope.ExaminationForm.crackle.$commitViewValue(),$scope.ExaminationForm.s1_s2_present.$render(),$scope.ExaminationForm.s1_s2_present.$commitViewValue(),$scope.ExaminationForm.s3.$render(),$scope.ExaminationForm.s3.$commitViewValue(),$scope.ExaminationForm.s4.$render(),$scope.ExaminationForm.s4.$commitViewValue(),$scope.ExaminationForm.ppp.$render(),$scope.ExaminationForm.ppp.$commitViewValue(),$scope.ExaminationForm.murmur.$render(),$scope.ExaminationForm.murmur.$commitViewValue(),$scope.ExaminationForm.jvd.$render(),$scope.ExaminationForm.jvd.$commitViewValue(),$scope.ExaminationForm.soft_and_non_tender.$render(),$scope.ExaminationForm.soft_and_non_tender.$commitViewValue(),$scope.ExaminationForm.bsp.$render(),$scope.ExaminationForm.bsp.$commitViewValue(),$scope.ExaminationForm.fpp_and_equal.$render(),$scope.ExaminationForm.fpp_and_equal.$commitViewValue(),$scope.ExaminationForm.organomegaly.$render(),$scope.ExaminationForm.organomegaly.$commitViewValue(),$scope.ExaminationForm.no_sign_of_peritonitis.$render(),$scope.ExaminationForm.no_sign_of_peritonitis.$commitViewValue(),$scope.ExaminationForm.throat_clear.$render(),$scope.ExaminationForm.throat_clear.$commitViewValue(),$scope.ExaminationForm.tm.$render(),$scope.ExaminationForm.tm.$commitViewValue(),$scope.ExaminationForm.neck_supple.$render(),$scope.ExaminationForm.neck_supple.$commitViewValue(),$scope.ExaminationForm.cerebellum_exam.$render(),$scope.ExaminationForm.cerebellum_exam.$commitViewValue(),$scope.ExaminationForm.power.$render(),$scope.ExaminationForm.power.$commitViewValue(),$scope.ExaminationForm.sensation.$render(),$scope.ExaminationForm.sensation.$commitViewValue(),$scope.ExaminationForm.tone.$render(),$scope.ExaminationForm.tone.$commitViewValue(),$scope.ExaminationForm.reflex.$render(),$scope.ExaminationForm.reflex.$commitViewValue();var page=document.getElementById("form");return page},printDone=function(){angular.forEach($elem.parent().children(),function(value,key){key>=2&&value.remove()}),$scope.chart.printed=!0,initSaveChart()},initPrint=function(){for(var printPage=prepPageToPrint(),parentElem=angular.element($elem[0].parentNode),formElem=angular.element($elem.parent());$elem.parent()[0].children.length<=2;)parentElem.append(formElem.html());ionic.Platform.ready(function(){cordova.plugins.printer.print(printPage,"er-pid-"+$scope.chart.id||"print",function(){printDone()})})};$scope.$on("PageEvent:Print",function(){checkChart().then(function(){initPrint()},function(){showPatientIdPopupAndPrint().then(function(popupResult){popupResult&&initPrint()})})}),$scope.$on("PageEvent:SaveChart",function(){console.log("Event@erForm:: PageEvent:SaveChart"),initSaveChart()}),$scope.$on("PageEvent:UpdateChart",function(){!$scope.ExaminationForm.$invalid&&$state.is("root.edit")&&initSaveChart()}),$scope.$on("PageEvent:GoHome",function(){$scope.ExaminationForm.$pristine&&!$scope.ExaminationForm.$dirty?$state.go("root.home"):!$scope.ExaminationForm.$invalid&&$state.is("root.edit")?initSaveChart():$scope.ExaminationForm.$invalid&&$state.is("root.form")&&initSaveChart()}),$scope.$on("PageEvent:isAdd",function(){$timeout(function(){setDefault("default").then(function(formScope){formScope.$setPristine(),formScope.$setUntouched()})})}),$scope.$on("PageEvent:isEdit",function(){initEditChart()})}}]),angular.module("ERChart").directive("erItemIsprinted",function(){return{restrict:"A",link:function(scope,element,attrs){if(attrs.erItemIsprinted){var c=angular.element(element.children()[0]);c[0].style.background="beige"}}}}),angular.module("ERChart").controller("PincodeCtrl",["$scope","$state","$timeout","eruser",function($scope,$state,$timeout,eruser){eruser.getAuthdUser("simplelogin:15").then(function(r){console.log(Immutable.fromJS(r))});var pin=[];this.unlockPin=function(val){if(2!==pin.length)pin.push(val),console.log("a");else if(2===pin.length)return console.log("yo"),$state.go("root.home"),pin=[];console.log(pin)}}]),angular.module("ERChart").factory("eruser",["$localForage","$window","$q",function($localForage,$window,$q){var eruser={createUser:function(newUser,data){return $localForage.setItem(newUser._eruid,data)},getAuthdUser:function(userKey){return $localForage.getItem(userKey)},getLocalAuthUser:function(){var erfire_session_key="firebase:session::era";return $window.localStorage[erfire_session_key]},isUserAuthd:function(){var deferred=$q.defer();return angular.isDefined(this.getLocalAuthUser())?deferred.resolve(!0):deferred.reject(!1),deferred.promise}};return eruser}]),angular.module("ErAuth",[]),angular.module("ErAuth").config(["$stateProvider",function(){}]),angular.module("ErAuth").factory("globalAuth",function(){var globalAuth={};return globalAuth});
//# sourceMappingURL=data:application/json;base64,